/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A payload containing URL
    /// </summary>
    [DataContract(Name = "UrlPayload")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(ContactPayload), "ContactPayload")]
    [JsonSubtypes.KnownSubType(typeof(ImagePayload), "ImagePayload")]
    [JsonSubtypes.KnownSubType(typeof(UrlPayload), "UrlPayload")]
    public partial class UrlPayload : BasePayload, IEquatable<UrlPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UrlPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UrlPayload" /> class.
        /// </summary>
        /// <param name="url">The URL (required).</param>
        /// <param name="isUseExternalBrowser">A flag indicating whether to open the URL in an external browser.</param>
        /// <param name="isGenerateAccessToken">A flag indicating whether to generate access token on retrieval.</param>
        /// <param name="isIncludeGeolocationInToken">A flag indicating whether to include geolocation in the access token.</param>
        /// <param name="type">Defines the type of the payload (required) (default to &quot;UrlPayload&quot;).</param>
        public UrlPayload(string url = default(string), bool isUseExternalBrowser = default(bool), bool isGenerateAccessToken = default(bool), bool isIncludeGeolocationInToken = default(bool), string type = "UrlPayload") : base()
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for UrlPayload and cannot be null");
            }
            this.Url = url;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for UrlPayload and cannot be null");
            }
            this.Type = type;
            this.IsUseExternalBrowser = isUseExternalBrowser;
            this.IsGenerateAccessToken = isGenerateAccessToken;
            this.IsIncludeGeolocationInToken = isIncludeGeolocationInToken;
        }

        /// <summary>
        /// The URL
        /// </summary>
        /// <value>The URL</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// A flag indicating whether to open the URL in an external browser
        /// </summary>
        /// <value>A flag indicating whether to open the URL in an external browser</value>
        [DataMember(Name = "isUseExternalBrowser", EmitDefaultValue = true)]
        public bool IsUseExternalBrowser { get; set; }

        /// <summary>
        /// A flag indicating whether to generate access token on retrieval
        /// </summary>
        /// <value>A flag indicating whether to generate access token on retrieval</value>
        [DataMember(Name = "isGenerateAccessToken", EmitDefaultValue = true)]
        public bool IsGenerateAccessToken { get; set; }

        /// <summary>
        /// A flag indicating whether to include geolocation in the access token
        /// </summary>
        /// <value>A flag indicating whether to include geolocation in the access token</value>
        [DataMember(Name = "isIncludeGeolocationInToken", EmitDefaultValue = true)]
        public bool IsIncludeGeolocationInToken { get; set; }

        /// <summary>
        /// Defines the type of the payload
        /// </summary>
        /// <value>Defines the type of the payload</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UrlPayload {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  IsUseExternalBrowser: ").Append(IsUseExternalBrowser).Append("\n");
            sb.Append("  IsGenerateAccessToken: ").Append(IsGenerateAccessToken).Append("\n");
            sb.Append("  IsIncludeGeolocationInToken: ").Append(IsIncludeGeolocationInToken).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UrlPayload);
        }

        /// <summary>
        /// Returns true if UrlPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of UrlPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UrlPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && base.Equals(input) && 
                (
                    this.IsUseExternalBrowser == input.IsUseExternalBrowser ||
                    this.IsUseExternalBrowser.Equals(input.IsUseExternalBrowser)
                ) && base.Equals(input) && 
                (
                    this.IsGenerateAccessToken == input.IsGenerateAccessToken ||
                    this.IsGenerateAccessToken.Equals(input.IsGenerateAccessToken)
                ) && base.Equals(input) && 
                (
                    this.IsIncludeGeolocationInToken == input.IsIncludeGeolocationInToken ||
                    this.IsIncludeGeolocationInToken.Equals(input.IsIncludeGeolocationInToken)
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsUseExternalBrowser.GetHashCode();
                hashCode = (hashCode * 59) + this.IsGenerateAccessToken.GetHashCode();
                hashCode = (hashCode * 59) + this.IsIncludeGeolocationInToken.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }

}
