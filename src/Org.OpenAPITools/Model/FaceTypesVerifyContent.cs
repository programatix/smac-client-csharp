/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FaceTypesVerifyContent
    /// </summary>
    [DataContract(Name = "FaceTypesVerifyContent")]
    public partial class FaceTypesVerifyContent : IEquatable<FaceTypesVerifyContent>, IValidatableObject
    {
        /// <summary>
        /// The content type
        /// </summary>
        /// <value>The content type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Face for value: Face
            /// </summary>
            [EnumMember(Value = "Face")]
            Face = 1

        }


        /// <summary>
        /// The content type
        /// </summary>
        /// <value>The content type</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceTypesVerifyContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaceTypesVerifyContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceTypesVerifyContent" /> class.
        /// </summary>
        /// <param name="files">The binary files containing the content (required).</param>
        /// <param name="type">The content type.</param>
        public FaceTypesVerifyContent(List<System.IO.Stream> files = default(List<System.IO.Stream>), TypeEnum? type = default(TypeEnum?))
        {
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new ArgumentNullException("files is a required property for FaceTypesVerifyContent and cannot be null");
            }
            this.Files = files;
            this.Type = type;
        }

        /// <summary>
        /// The binary files containing the content
        /// </summary>
        /// <value>The binary files containing the content</value>
        [DataMember(Name = "files", IsRequired = true, EmitDefaultValue = true)]
        public List<System.IO.Stream> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaceTypesVerifyContent {\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaceTypesVerifyContent);
        }

        /// <summary>
        /// Returns true if FaceTypesVerifyContent instances are equal
        /// </summary>
        /// <param name="input">Instance of FaceTypesVerifyContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaceTypesVerifyContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Files != null)
                {
                    hashCode = (hashCode * 59) + this.Files.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
