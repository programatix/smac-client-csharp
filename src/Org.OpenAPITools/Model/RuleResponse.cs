/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RuleResponse
    /// </summary>
    [DataContract(Name = "RuleResponse")]
    public partial class RuleResponse : IEquatable<RuleResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleResponse" /> class.
        /// </summary>
        /// <param name="id">The rule identifier.</param>
        /// <param name="name">The rule name.</param>
        /// <param name="description">The rule description.</param>
        /// <param name="data">data.</param>
        /// <param name="usageCount">The usage count (It indicates the number of Dataset(s) attached to it.).</param>
        public RuleResponse(Guid id = default(Guid), string name = default(string), string description = default(string), RuleRequestData data = default(RuleRequestData), int usageCount = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Data = data;
            this.UsageCount = usageCount;
        }

        /// <summary>
        /// The rule identifier
        /// </summary>
        /// <value>The rule identifier</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// The rule name
        /// </summary>
        /// <value>The rule name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The rule description
        /// </summary>
        /// <value>The rule description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public RuleRequestData Data { get; set; }

        /// <summary>
        /// The usage count (It indicates the number of Dataset(s) attached to it.)
        /// </summary>
        /// <value>The usage count (It indicates the number of Dataset(s) attached to it.)</value>
        [DataMember(Name = "usageCount", EmitDefaultValue = false)]
        public int UsageCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  UsageCount: ").Append(UsageCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleResponse);
        }

        /// <summary>
        /// Returns true if RuleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.UsageCount == input.UsageCount ||
                    this.UsageCount.Equals(input.UsageCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsageCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
