/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ExtractRequest
    /// </summary>
    [DataContract(Name = "ExtractRequest")]
    public partial class ExtractRequest : IEquatable<ExtractRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExtractRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractRequest" /> class.
        /// </summary>
        /// <param name="imageBase64Url">A Base64Url representation of the image file (Use Microsoft.IdentityModel.Tokens.Base64UrlEncoder to encode.) (required).</param>
        public ExtractRequest(string imageBase64Url = default(string))
        {
            // to ensure "imageBase64Url" is required (not null)
            if (imageBase64Url == null)
            {
                throw new ArgumentNullException("imageBase64Url is a required property for ExtractRequest and cannot be null");
            }
            this.ImageBase64Url = imageBase64Url;
        }

        /// <summary>
        /// A Base64Url representation of the image file (Use Microsoft.IdentityModel.Tokens.Base64UrlEncoder to encode.)
        /// </summary>
        /// <value>A Base64Url representation of the image file (Use Microsoft.IdentityModel.Tokens.Base64UrlEncoder to encode.)</value>
        [DataMember(Name = "imageBase64Url", IsRequired = true, EmitDefaultValue = true)]
        public string ImageBase64Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExtractRequest {\n");
            sb.Append("  ImageBase64Url: ").Append(ImageBase64Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtractRequest);
        }

        /// <summary>
        /// Returns true if ExtractRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtractRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ImageBase64Url == input.ImageBase64Url ||
                    (this.ImageBase64Url != null &&
                    this.ImageBase64Url.Equals(input.ImageBase64Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageBase64Url != null)
                {
                    hashCode = (hashCode * 59) + this.ImageBase64Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ImageBase64Url (string) minLength
            if (this.ImageBase64Url != null && this.ImageBase64Url.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImageBase64Url, length must be greater than 1.", new [] { "ImageBase64Url" });
            }

            yield break;
        }
    }

}
