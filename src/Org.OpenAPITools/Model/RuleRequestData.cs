/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The rule data
    /// </summary>
    [JsonConverter(typeof(RuleRequestDataJsonConverter))]
    [DataContract(Name = "RuleRequest_data")]
    public partial class RuleRequestData : AbstractOpenAPISchema, IEquatable<RuleRequestData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRequestData" /> class.
        /// </summary>
        public RuleRequestData()
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRequestData" /> class
        /// with the <see cref="DateTimeRule" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DateTimeRule.</param>
        public RuleRequestData(DateTimeRule actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRequestData" /> class
        /// with the <see cref="EmailRule" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmailRule.</param>
        public RuleRequestData(EmailRule actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRequestData" /> class
        /// with the <see cref="LocationRule" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LocationRule.</param>
        public RuleRequestData(LocationRule actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRequestData" /> class
        /// with the <see cref="ScanOptionRule" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ScanOptionRule.</param>
        public RuleRequestData(ScanOptionRule actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRequestData" /> class
        /// with the <see cref="UserRoleRule" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UserRoleRule.</param>
        public RuleRequestData(UserRoleRule actualInstance)
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance;
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(DateTimeRule))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmailRule))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(LocationRule))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ScanOptionRule))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(UserRoleRule))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: DateTimeRule, EmailRule, LocationRule, ScanOptionRule, UserRoleRule");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `DateTimeRule`. If the actual instance is not `DateTimeRule`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DateTimeRule</returns>
        public DateTimeRule GetDateTimeRule()
        {
            return (DateTimeRule)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmailRule`. If the actual instance is not `EmailRule`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmailRule</returns>
        public EmailRule GetEmailRule()
        {
            return (EmailRule)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LocationRule`. If the actual instance is not `LocationRule`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LocationRule</returns>
        public LocationRule GetLocationRule()
        {
            return (LocationRule)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ScanOptionRule`. If the actual instance is not `ScanOptionRule`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ScanOptionRule</returns>
        public ScanOptionRule GetScanOptionRule()
        {
            return (ScanOptionRule)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UserRoleRule`. If the actual instance is not `UserRoleRule`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UserRoleRule</returns>
        public UserRoleRule GetUserRoleRule()
        {
            return (UserRoleRule)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleRequestData {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, RuleRequestData.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of RuleRequestData
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of RuleRequestData</returns>
        public static RuleRequestData FromJson(string jsonString)
        {
            RuleRequestData newRuleRequestData = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newRuleRequestData;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DateTimeRule).GetProperty("AdditionalProperties") == null)
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<DateTimeRule>(jsonString, RuleRequestData.SerializerSettings));
                }
                else
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<DateTimeRule>(jsonString, RuleRequestData.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DateTimeRule");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DateTimeRule: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EmailRule).GetProperty("AdditionalProperties") == null)
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<EmailRule>(jsonString, RuleRequestData.SerializerSettings));
                }
                else
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<EmailRule>(jsonString, RuleRequestData.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("EmailRule");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmailRule: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LocationRule).GetProperty("AdditionalProperties") == null)
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<LocationRule>(jsonString, RuleRequestData.SerializerSettings));
                }
                else
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<LocationRule>(jsonString, RuleRequestData.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("LocationRule");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into LocationRule: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ScanOptionRule).GetProperty("AdditionalProperties") == null)
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<ScanOptionRule>(jsonString, RuleRequestData.SerializerSettings));
                }
                else
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<ScanOptionRule>(jsonString, RuleRequestData.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ScanOptionRule");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ScanOptionRule: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UserRoleRule).GetProperty("AdditionalProperties") == null)
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<UserRoleRule>(jsonString, RuleRequestData.SerializerSettings));
                }
                else
                {
                    newRuleRequestData = new RuleRequestData(JsonConvert.DeserializeObject<UserRoleRule>(jsonString, RuleRequestData.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("UserRoleRule");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into UserRoleRule: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newRuleRequestData;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleRequestData);
        }

        /// <summary>
        /// Returns true if RuleRequestData instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleRequestData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleRequestData input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for RuleRequestData
    /// </summary>
    public class RuleRequestDataJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(RuleRequestData).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return RuleRequestData.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
