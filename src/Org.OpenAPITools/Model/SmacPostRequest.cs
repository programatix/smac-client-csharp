/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SmacPostRequest
    /// </summary>
    [DataContract(Name = "SmacPostRequest")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(SmacPostRequest), "SmacPostRequest")]
    [JsonSubtypes.KnownSubType(typeof(SmacRequest), "SmacRequest")]
    public partial class SmacPostRequest : SmacRequest, IEquatable<SmacPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmacPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SmacPostRequest() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmacPostRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required) (default to &quot;SmacPostRequest&quot;).</param>
        /// <param name="description">The SMAC description.</param>
        /// <param name="datasets">The dataset identifiers to attach.</param>
        /// <param name="associatedUsers">The list of associated users.</param>
        public SmacPostRequest(string name = default(string), string type = "SmacPostRequest", string description = default(string), List<Guid> datasets = default(List<Guid>), List<AssociatedUser> associatedUsers = default(List<AssociatedUser>)) : base(type, name, description, datasets, associatedUsers)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SmacPostRequest and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SmacPostRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmacPostRequest);
        }

        /// <summary>
        /// Returns true if SmacPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SmacPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmacPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new[] { "Name" });
            }

            yield break;
        }
    }
}