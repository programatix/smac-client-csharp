/*
 * SMAC API
 *
 * SMAC ASP.NET Core Web API
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApiBiometricsVerifyIrisPostRequest
    /// </summary>
    [DataContract(Name = "_api_Biometrics_verifyIris_post_request")]
    public partial class ApiBiometricsVerifyIrisPostRequest : IEquatable<ApiBiometricsVerifyIrisPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiBiometricsVerifyIrisPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiBiometricsVerifyIrisPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiBiometricsVerifyIrisPostRequest" /> class.
        /// </summary>
        /// <param name="userId">The user identifier to verify against (required).</param>
        /// <param name="contents">The probe images to verify with (required).</param>
        public ApiBiometricsVerifyIrisPostRequest(Guid userId = default(Guid), List<IrisTypesVerifyContent> contents = default(List<IrisTypesVerifyContent>))
        {
            this.UserId = userId;
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for ApiBiometricsVerifyIrisPostRequest and cannot be null");
            }
            this.Contents = contents;
        }

        /// <summary>
        /// The user identifier to verify against
        /// </summary>
        /// <value>The user identifier to verify against</value>
        [DataMember(Name = "UserId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// The probe images to verify with
        /// </summary>
        /// <value>The probe images to verify with</value>
        [DataMember(Name = "Contents", IsRequired = true, EmitDefaultValue = true)]
        public List<IrisTypesVerifyContent> Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiBiometricsVerifyIrisPostRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiBiometricsVerifyIrisPostRequest);
        }

        /// <summary>
        /// Returns true if ApiBiometricsVerifyIrisPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiBiometricsVerifyIrisPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiBiometricsVerifyIrisPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Contents == input.Contents ||
                    this.Contents != null &&
                    input.Contents != null &&
                    this.Contents.SequenceEqual(input.Contents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.Contents != null)
                {
                    hashCode = (hashCode * 59) + this.Contents.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
